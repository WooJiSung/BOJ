#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
	int data;
	int visited;
}Node;

int check(Node node)
{
	if (node.data == 1 && node.visited == 0)
		return 1;
	return 0;
}

void DFS(Node **node, int i, int j, int w, int h)
{
	node[i][j].visited = 1;

	if (i > 0 && j > 0 && check(node[i - 1][j - 1]))
		DFS(node, i - 1, j - 1, w, h);
	if (i > 0 && check(node[i - 1][j]))
		DFS(node, i - 1, j, w, h);
	if (i > 0 && j + 1 < w && check(node[i - 1][j + 1]))
		DFS(node, i - 1, j + 1, w, h);

	if (j > 0 && check(node[i][j - 1]))
		DFS(node, i, j - 1, w, h);
	if (j + 1 < w && check(node[i][j + 1]))
		DFS(node, i, j + 1, w, h);

	if (i + 1 < h && j - 1 < w && check(node[i + 1][j - 1]))
		DFS(node, i + 1, j - 1, w, h);
	if (i + 1 < h && check(node[i + 1][j]))
		DFS(node, i + 1, j, w, h);
	if (i + 1 < h && j + 1 < w && check(node[i + 1][j + 1]))
		DFS(node, i + 1, j + 1, w, h);
}

void Search(Node **node, int i, int j, int w, int h, int *cnt)
{
	if (i == h)
		return;

	if (j == w)
	{
		Search(node, i + 1, 0, w, h, cnt);
		return;
	}

	if (1 - check(node[i][j]))
	{
		Search(node, i, j + 1, w, h, cnt);
		return;
	}

	(*cnt)++;
	DFS(node, i, j, w, h);
	Search(node, i, j + 1, w, h, cnt);
}

int main()
{
	int i, j, w, h, data;

	while (1)
	{
		scanf("%d %d", &w, &h);
		if (w == 0 && h == 0)
			return 0;

		Node **node = (Node **)malloc(sizeof(Node *) * h);
		for (i = 0; i < h; i++)
		{
			node[i] = (Node *)malloc(sizeof(Node) * w);
			for (j = 0; j < w; j++)
			{
				scanf("%d", &data);
				node[i][j].data = data;
				node[i][j].visited = 0;
			}
		}

		int cnt = 0;
		Search(node, 0, 0, w, h, &cnt);
		printf("%d\n", cnt);

		for (i = 0; i < h; i++)
			free(node[i]);
		free(node);
	}
}