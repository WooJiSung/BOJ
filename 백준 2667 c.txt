#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
	char data;
	int fresh;
}Node;

int check(Node **node, int i, int j)
{
	if (node[i][j].fresh == 1 && node[i][j].data == '1')
		return 1;
	return 0;
}

void apartment(Node **node, int i, int j, int n, int *output)
{
	node[i][j].fresh = 0;
	(*output)++;

	if (i > 0 && check(node, i - 1, j))		apartment(node, i - 1, j, n, output);
	if (j > 0 && check(node, i, j - 1))		apartment(node, i, j - 1, n, output);
	if (i < n - 1 && check(node, i + 1, j))	apartment(node, i + 1, j, n, output);
	if (j < n - 1 && check(node, i, j + 1))	apartment(node, i, j + 1, n, output);
}

void search(Node **node, int i, int j, int n, int *arr, int *cnt)
{
	if (i == n)
		return;

	if (j == n)
	{
		search(node, i + 1, 0, n, arr, cnt);
		return;
	}

	if (1 - check(node, i, j))
	{
		search(node, i, j + 1, n, arr, cnt);
		return;
	}

	else
	{
		int output = 0;
		apartment(node, i, j, n, &output);
		(*cnt)++;
		(*arr) = output;
		arr++;
		(*arr) = 0;
		search(node, i, j + 1, n, arr, cnt);
	}
}

int main()
{
	Node **house;
	char data;
	int i, j, k, n;
	scanf("%d", &n);
	house = (Node **)malloc(sizeof(Node *) * n);

	for (i = 0; i < n; i++)
	{
		getchar();
		house[i] = (Node *)malloc(sizeof(Node) * n);
		for (j = 0; j < n; j++)
		{
			scanf("%c", &data);
			house[i][j].data = data;
			house[i][j].fresh = 1;
		}
	}

	int *arr = (int *)malloc(sizeof(int) * (n * n));
	int cnt = 0;
	search(house, 0, 0, n, arr, &cnt);

	printf("%d\n", cnt);
	for (i = 0; i < cnt; i++)		// insert sort
	{
		for (j = i + 1; j < cnt; j++)
		{
			if (*(arr + i) > *(arr + j))
			{
				int temp = *(arr + i);
				for (k = i + 1; k <= j; k++)
					*(arr + k - 1) = *(arr + k);
				*(arr + j) = temp;
				i--;
				break;
			}
		}
	}

	for (int *p = arr; *p; p++)
		printf("%d\n", *p);

	for (i = 0; i < n; i++)
		free(house[i]);
	free(house);
	free(arr);

	return 0;
}