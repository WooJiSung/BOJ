#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
	int data;
	int fresh;
}Node;

int check(Node **node, int i, int j)
{
	if (node[i][j].fresh == 1 && node[i][j].data == 1)
		return 1;
	return 0;
}

void jirung(Node **node, int i, int j, int n, int m)
{
	node[i][j].fresh = 0;

	if (i > 0 && check(node, i - 1, j))		jirung(node, i - 1, j, n, m);
	if (j > 0 && check(node, i, j - 1))		jirung(node, i, j - 1, n, m);
	if (i < n - 1 && check(node, i + 1, j))	jirung(node, i + 1, j, n, m);
	if (j < m - 1 && check(node, i, j + 1))	jirung(node, i, j + 1, n, m);
}

void search(Node **node, int i, int j, int n, int m, int *cnt)
{
	if (i == n)
		return;

	if (j == m)
	{
		search(node, i + 1, 0, n, m, cnt);
		return;
	}

	if (1 - check(node, i, j))
		search(node, i, j + 1, n, m, cnt);
	
	else
	{
		jirung(node, i, j, n, m);
		(*cnt)++;
		search(node, i, j + 1, n, m, cnt);
	}
}

int main()
{
	Node **node;
	int i, j, t, m, n, k, x, y;
	scanf("%d", &t);

	for (int test = 0; test < t; test++)
	{
		scanf("%d %d %d", &m, &n, &k);
		node = (Node **)malloc(sizeof(Node *) * n);

		for (i = 0; i < n; i++)
		{
			node[i] = (Node *)malloc(sizeof(Node) * m);
			for (j = 0; j < m; j++)
			{
				node[i][j].data = 0;
				node[i][j].fresh = 1;
			}
		}

		for (i = 0; i < k; i++)
		{
			scanf("%d %d", &x, &y);
			node[y][x].data = 1;
		}

		int cnt = 0;
		search(node, 0, 0, n, m, &cnt);
		printf("%d\n", cnt);

		for (i = 0; i < n; i++)
			free(node[i]);
		free(node);
	}

	return 0;
}